const originalRenderArea = window.renderArea;
let rendered = false;
let toggleUI = true;
let toggleMinimap = true;

function handleKey(event) {
    if (event.key.toLowerCase() === "h") {
        toggleUI = !toggleUI;
    } else if (event.key.toLowerCase() === "m") {
        toggleMinimap = !toggleMinimap;
    }

    if (toggleUI && toggleMinimap) {
        rendered = false;
        window.renderArea = originalRenderArea;
    } else if (!rendered) {
        rendered = true;
        window.renderArea = renderBr1hArea;
    }
}

document.addEventListener("keydown", handleKey);

//Re-written render Area
function renderBr1hArea(area, players, focus, old) {
    var ligth = document.createElement('canvas');
    var context1 = ligth.getContext("2d");
    ligth.width = width;
    ligth.height = height;
    var world = game.worlds[players[0].world];
    if(old.area!=players[0].area||old.world!=players[0].world||!canv&&tiles.complete){
        canv = renderTiles(area, players, focus);
    }
    if(canv){
        context.drawImage(canv.can,(-focus.x)*fov+width/2+area.pos.x*fov,(-focus.y)*fov+height/2+area.pos.y*fov)//-focus.x*fov,-focus.y*fov)//(-focus.x+world.pos.x)*fov,(-focus.y+world.pos.y)*fov);
    }
    renderFirstEntities(area, players, focus)
    renderAssets(area, players, focus)
    context.globalAlpha = 1;
    renderPlayers(area, players, focus);
    renderSecondEntities(area, players, focus)
    if (area.lighting < 1){ //Optimising
        for (var i in players) {
            try{
                var player = players[i];
                var grad = context1.createRadialGradient(width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, 0, width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, (player.radius + 30 / 32) * fov);
                grad.addColorStop(0, "rgba(0, 0, 0, 1)");
                grad.addColorStop(1, "rgba(0, 0, 0, 0)");
                context1.beginPath();
                context1.fillStyle = grad;
                context1.arc(width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, (player.radius + 30 / 32) * fov, 0, 2 * Math.PI, !1);
                context1.fill();
                context1.closePath();
            }catch(e){}
            if(player.flashlight_active){
                player.energy -= 1 / 30;
                if(player.energy<=0){player.flashlight_active = false}
                try{var player = players[i];
                    var grad = context1.createRadialGradient(width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, 0, width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, (460 / 32) * fov);
                    grad.addColorStop(0, "rgba(0, 0, 0, 1)");
                    grad.addColorStop(1, "rgba(0, 0, 0, 0)");
                    context1.beginPath();
                    context1.fillStyle = grad;
                    var rotationSpeed = 15;
                    var flashlight_angle = 15;
                    var flashlight_distance = 500;
                    if(!mouse&&player.moving){
                        var angle = player.lastAng;
                        if(player.dirX>0){angle = 0;}
                        else if(player.dirX<0){angle = 180;}
                        if(player.dirY>0){angle = 90;}
                        else if(player.dirY<0){angle = 270;}
                        if(player.dirX>0&&player.dirY>0){angle = 45}
                        else if(player.dirX>0&&player.dirY<0){angle = 315}
                        else if(player.dirX<0&&player.dirY>0){angle = 135}
                        else if(player.dirX<0&&player.dirY<0){angle = 225}
                        player.inputAng = angle;
                    }
                    else if(mouse){
                        var angle = Math.atan2(mousePos.y-(height / 2 + (player.pos.y - focus.y) * fov), mousePos.x-(width / 2 + (player.pos.x - focus.x) * fov));
                        angle = (angle * 180) / Math.PI;
                        player.inputAng = angle;
                    }
                    if(player.inputAng<0){player.inputAng+=360}
                    if(player.inputAng>=360){player.inputAng-=360}
                    var distanceOne = player.inputAng - Math.abs(player.lastAng);
                    if(player.lastAng<=player.inputAng+rotationSpeed&&player.lastAng>=player.inputAng-rotationSpeed){}
                    else if(distanceOne<-180){player.lastAng+=rotationSpeed;}
                    else if(distanceOne>180){player.lastAng-=rotationSpeed;}
                    else if(distanceOne<0){player.lastAng-=rotationSpeed;}
                    else if(distanceOne>0){player.lastAng+=rotationSpeed;}
                    if(player.lastAng>=360)player.lastAng-=360;
                    if(player.lastAng<0)player.lastAng+=360;
                    if(player.lastAng<=player.inputAng+rotationSpeed&&player.lastAng>=player.inputAng-rotationSpeed){player.lastAng = player.inputAng}

                    context1.moveTo(width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov);
                    context1.arc(width / 2 + (player.pos.x - focus.x) * fov, height / 2 + (player.pos.y - focus.y) * fov, (flashlight_distance / 32) * fov,(Math.PI/180)*(-flashlight_angle+player.lastAng), (Math.PI/180)*(flashlight_angle+player.lastAng));
                    context1.fill();
                    context1.closePath();
                   }catch(e){}}
        }
        for(let i in area.entities){
            for(let j in area.entities[i]){
                var ent = area.entities[i][j]
                if(ent.isLight){
                    try{var grad1 = context1.createRadialGradient(width / 2 + (area.pos.x + ent.pos.x - focus.x) * fov, height / 2 + (area.pos.y + ent.pos.y - focus.y) * fov, 0, width / 2 + (area.pos.x + ent.pos.x - focus.x) * fov, height / 2 + (area.pos.y + ent.pos.y - focus.y) * fov, (ent.radius + ent.lightCount / 32) * fov);
                        grad1.addColorStop(0, "rgba(0, 0, 0, 1)");
                        grad1.addColorStop(1, "rgba(0, 0, 0, 0)");
                        context1.beginPath();
                        context1.fillStyle = grad1;
                        context1.arc(width / 2 + (area.pos.x + ent.pos.x - focus.x) * fov, height / 2 + (area.pos.y + ent.pos.y - focus.y) * fov, (ent.radius + ent.lightCount / 32) * fov, 0, 2 * Math.PI, !1);
                        context1.fill();
                        context1.closePath();
                       }catch(e){}
                }
            }
        }
        for (var i in area.assets) {
            var zone = area.assets[i];
            if(zone.type==6||zone.type==8||zone.type==4){
                try{
                    let lightPower = 110;
                    if(zone.type==4){
                        lightPower = 250;
                        zone.pos.x += zone.size.x/2
                        zone.pos.y += zone.size.y/2
                    }
                    var grad1 = context1.createRadialGradient(width / 2 + (area.pos.x + zone.pos.x - focus.x) * fov, height / 2 + (area.pos.y + zone.pos.y - focus.y) * fov, 0, width / 2 + (area.pos.x + zone.pos.x - focus.x) * fov, height / 2 + (area.pos.y + zone.pos.y - focus.y) * fov, (lightPower / 32) * fov);
                    grad1.addColorStop(0, "rgba(0, 0, 0, 1)");
                    grad1.addColorStop(1, "rgba(0, 0, 0, 0)");
                    context1.beginPath();
                    context1.fillStyle = grad1;
                    context1.arc(width / 2 + (area.pos.x + zone.pos.x - focus.x) * fov, height / 2 + (area.pos.y + zone.pos.y - focus.y) * fov, (lightPower / 32) * fov, 0, 2 * Math.PI, !1);
                    context1.fill();
                    context1.closePath();
                    if(zone.type==4){
                        zone.pos.x -= zone.size.x/2
                        zone.pos.y -= zone.size.y/2
                    }
                }catch(e){}
            }
        }
        context1.beginPath();
        context1.fillStyle = "rgba(0, 0, 0, " + area.lighting + ")"
        context1.fillRect(0, 0, width, height);
        context1.fill();
        context1.closePath();
        context.globalCompositeOperation = "destination-in"
        context.drawImage(ligth, 0, 0)
        context.globalCompositeOperation = "source-over"

        context.beginPath();
        context.font = "22px cursive";
        context.fillStyle = "gray";
        context.strokeStyle = "gray";
        context.textAlign = "start";
        context.lineWidth = 0.5;
        const diff = document.getElementById("diff").value;
        const devStat = "Comb Spd: "+ combineSpeed(player) + ", Amount: " + player.safeAmount;
        let offset = 0;
        if(diff == "Easy"){
            const deathCounter = (settings.dev) ? "Death Count: " + players[0].deathCounter + ", " + devStat : "Death Count: " + players[0].deathCounter;
            context.fillText(deathCounter, 0, 20);
            context.strokeText(deathCounter, 0, 20);
        } else if (diff == "Medium"){
            const lives = (settings.dev) ? "Lives: " + players[0].lives + ", " + devStat : "Lives: " + players[0].lives;
            let liveColor;
            switch(players[0].lives){
                case 3: liveColor = "green"
                    break;
                case 2: liveColor = "yellow"
                    break;
                case 1: liveColor = "orange"
                    break;
                case 0: liveColor = "red"
                    break;
            }
            context.fillStyle = liveColor;
            context.strokeStyle = liveColor;//'black';
            context.fillText(lives, 0, 20);
            context.strokeText(lives, 0, 20);
        } else if (settings.dev) {
            const text = devStat;
            context.fillText(text, 0, 20);
            context.strokeText(text, 0, 20);
        }
        if(settings.dev){
            context.fillStyle = "gray";
            context.strokeStyle = 'gray';
            const safePoint = (player.safePoint) ? "Safe Point: {X:" + Math.round(player.safePoint.pos.x*fov) + ", Y: " + Math.round(player.safePoint.pos.y*fov) + "} ([), to clear (])" : "None ([)";
            context.fillText(safePoint, 0, 45+offset);
            context.strokeText(safePoint, 0, 45+offset);
            const playerPos = "Player: {X:" + Math.round(player.pos.x*fov) + ", Y: " + Math.round(player.pos.y*fov) + ", Speed: "+greaterMax(player)+"}";
            context.fillText(playerPos, 0, 70+offset);
            context.strokeText(playerPos, 0, 70+offset);
            const timerClear = "Timer-clear: "+settings.timerClear+" (P), (O)";
            context.fillText(timerClear, 0, 95+offset);
            context.strokeText(timerClear, 0, 95+offset);
        }
        context.fill();
        context.stroke();
        context.closePath();
    }

    if (toggleUI){
        renderUI(area, players, focus)
    }

    if (toggleMinimap){
        renderMinimap(area, players, focus)
    }
}
